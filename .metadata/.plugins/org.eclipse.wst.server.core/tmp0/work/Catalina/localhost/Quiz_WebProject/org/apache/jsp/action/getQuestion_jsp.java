/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.72
 * Generated at: 2021-11-28 15:45:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.action;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import question.*;
import java.util.ArrayList;

public final class getQuestion_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("question");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
   
   
//public static void main(String[] args)
   request.setCharacterEncoding("UTF-8");
   //문제 갯수 지정
   final int COUNT = 10;

   //qtype은 Link에서 getQuestion.jsp?type=n 형식으로 전달하자
   int qtype = Integer.parseInt(request.getParameter("type"));
   int type = qtype;
   System.out.println("qtype : " + qtype);
   
   //중복되는 문제 번호가 존재하는지 체크하기 위함
   ArrayList<Integer> check = new ArrayList<Integer>();
   
   //문제 정보 전송용
   ArrayList<QuestionDTO> questionList = new ArrayList<QuestionDTO>();
   
   for (int i = 0; i < COUNT; i++) {
      System.out.println("for문 " + i + "번째");
      
      //4면 랜덤이니 문제 종류 랜덤하게 섞어줘야함
      if (qtype == 4)
         type = (int)(Math.random() * 3);
      
      int questionNumber = 0;
      
      //0이면 국기, 1이면 수도, 2면 상식, 3이면 역사, 4면 랜덤
      switch (type) {
      //국기는 문제가 37번까지 있음.
      case 0 : 
         //중복되는 문제번호 아닐때까지 계속 뽑음
         do {
            questionNumber = (int)((Math.random()) * 37 - 1);
         } while(check.contains(questionNumber));
         QuestionDTO instance = new QuestionDTO();
         questionList.add(QuestionDAO.getFlagQuestion(questionNumber));
         break;
         
      case 1 :
      case 2 : 
      case 3 :
         //중복되는 문제번호 아닐때까지 계속 뽑음
         do {
            questionNumber = (int)((Math.random()) * 21 - 1);
         } while(check.contains(questionNumber));
         questionList.add(QuestionDAO.getQuestion(questionNumber, type));
         break;
         
      default :
         System.out.println("문제 삽입 오류입니다");
      }
      check.add(questionNumber);
   }
   
   //questionList라는 ArrayList<QuestionDTO>형식으로 session에 저장.
   session.setAttribute("questionList", questionList);
   
   switch(qtype) {
   case 0 : session.setAttribute("type", "국기"); break;
   case 1 : session.setAttribute("type", "수도"); break;
   case 2 : session.setAttribute("type", "상식"); break;
   case 3 : session.setAttribute("type", "역사"); break;
   case 4 : session.setAttribute("type", "랜덤"); break;
   }
   
   session.setAttribute("qnum", "0");
   session.setAttribute("score", "0");
   
   System.out.println("전송 전 문제내용");
   System.out.println(questionList.get(0).questionNumber);
   
   //문제풀이 페이지로 이동
   response.sendRedirect("../solveQuiz.jsp");

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
